




def rand( S ):
    S = S * 181 + 359
    return S


if 1:

    MASK2047 = (1<<11)-1
    MASK1023 = (1<<10)-1
    MASK8    = (1<<8)


    pwm = 2000
    S   = 1000
    k   = 0
    pwm_random  = 0



    pindir(P1_0,OUT)
    pindir( P1_6, OUT )
    pindir( P1_7, OUT )
    pindir( P1_2, PULSEOUT )
    pindir( P1_1, INPU )
    pindir( P1_3, INPU )
    
    pulse_enable(0)
    pulse_period(0,10000)
    pulse_width(0,2000)


    rval = 0

    while 1:
    
        k += 1

        # Calculate a new random pwm value
        if (k%30) == 0 :
            S = rand(S);
            rval = S & MASK1023
            rval = rval - 1000

        # slowly increment or decrement the pwm value
        # to wards the pwm_random value so that it increments
        # or decrements in 100 unit steps until it gets to
        # the value of rval
        if (rval - pwm_random >  100) :
           pwm_random = pwm_random + 100
        if (rval - pwm_random < -100) :
           pwm_random = pwm_random - 100


        for j in range( 500 ):
            # in the inner loop we will randomly flash the creeper eyes
            if 1 and (j % 50 == 0) :
                S = rand(S)
                if ((S | MASK8 ) > 0 ):     # if bit 8 happens to be set then light up led7 and led6
                    led7 = BIT7
                    led6 = BIT6
                    out(P1_6,1)
                    out(P1_7,1)
                    led_val = 1
                else:
                    out(P1_6,0)
                    out(P1_7,0)
                    led_val = 0
               # short delay
    
#        out(P1_7,led_val)
        # Look to see if any of the switches are high. 
        # increase or decrease the pwm value
        if (P1IN & BIT1): 
            pwm = pwm + 100  # If BIT1 switch is active then increment the base pwm variable by 100
    
        if (P1IN & BIT5) :
            pwm = pwm - 100;  # If BIT1 switch is active then decrement the base pwm variable by 100


            
        # Write the pwm value into CCR1 (condition count register 1) which sets the
        # on duty time for the servo. The value is the sum of the base pwm value
        # and the random pwm value
        pwm_sum = pwm + pwm_random
        if pwm_sum > 3200:  pwm_sum = 3200
        if (pwm_sum < 400): pwm_sum = 400

#        pulse_width(0,pwm_sum)
        CCR1 = pwm_sum
      
