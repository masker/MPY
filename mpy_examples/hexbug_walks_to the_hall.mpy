

####define_micro('msp430g2553')


macro( 'M1CE_HIGH',   'P1OUT |=  BIT3' )
macro( 'M1CE_LOW',    'P1OUT &= ~BIT3' )

macro( 'M2CE_HIGH',   'P1OUT |=  BIT2' )
macro( 'M2CE_LOW',    'P1OUT &= ~BIT2' )

macro( 'M1IN_HIGH',   'P1OUT |=  BIT4' )
macro( 'M1IN_LOW',    'P1OUT &= ~BIT4' )

macro( 'M2IN_HIGH',   'P2OUT |=  BIT2' )
macro( 'M2IN_LOW',    'P2OUT &= ~BIT2' )

macro( 'FAN_INIT_P1', '(BIT3|BIT2|BIT4)' )
macro( 'FAN_INIT_P2', '(BIT2)'           )

macro( 'TURN_MOTORCE_HIGH',   'M2CE_HIGH' )
macro( 'TURN_MOTORCE_LOW',    'M2CE_LOW'  )
macro( 'TURN_MOTORIN_HIGH',   'M2IN_HIGH' )
macro( 'TURN_MOTORIN_LOW',    'M2IN_LOW'  )
macro( 'WALK_MOTORCE_HIGH',   'M1CE_HIGH' )
macro( 'WALK_MOTORCE_LOW',    'M1CE_LOW'  )
macro( 'WALK_MOTORIN_HIGH',   'M1IN_HIGH' )
macro( 'WALK_MOTORIN_LOW',    'M1IN_LOW'  )

macro( 'ANALOG_P1_0',         '0' )
macro( 'ANALOG_P1_1',         '1' )
macro( 'ANALOG_P1_6',         '2' )
macro( 'ANALOG_P1_7',         '3' )
macro( 'DIGITAL_P2_3',        '4' )
macro( 'DIGITAL_P2_5',        '5' )
macro( 'DIGITAL_P2_6',        '6' )
macro( 'DIGITAL_P2_7',        '7' )


macro( 'IR_LED',              'DIGITAL_P2_6' )
macro( 'IR_ANALOG',           'ANALOG_P1_1'  )


def ConfigureUserGPIO():
    P2SEL = 0
    P2DIR = BIT6


def ConfigureFAN8200():
    P1DIR |= FAN_INIT_P1
    P1OUT = 0
    P2DIR |= FAN_INIT_P2
    P2OUT = 0

def ConfigureADC10( user_pin ):
    # Disable ADC10 during initialization 
    ADC10CTL0 &= ~ENC
    ADC10CTL0 = ADC10SHT_2 + ADC10ON   #  ADC10ON, interrupt enabled

    if user_pin == ANALOG_P1_0:
        ADC10CTL1 = INCH_0         # input A0
        ADC10AE0 |= 0x01           # PA.0 ADC option select	

    elif user_pin == ANALOG_P1_1:
        ADC10CTL1 = INCH_1         # input A1
        ADC10AE0 |= 0x02           # PA.1 ADC option select	

    elif user_pin == ANALOG_P1_6:
        ADC10CTL1 = INCH_6         # input A6
        ADC10AE0 |= 0x40           # PA.6 ADC option select	

    elif user_pin == ANALOG_P1_7:
        ADC10CTL1 = INCH_7         # input A7
        ADC10AE0 |= 0x80           # PA.7 ADC option select	



def nop_delay():
    _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP(); _NOP();



def Delay( dly ):
	for i in range(dly) :
		for k in range(1000):
			nop_delay()


def stop():
	WALK_MOTORCE_LOW
	WALK_MOTORIN_LOW
	TURN_MOTORCE_LOW
	TURN_MOTORIN_LOW

def backward():
        stop()
        WALK_MOTORCE_HIGH
    
def forward():
        stop()
        WALK_MOTORCE_HIGH
        WALK_MOTORIN_HIGH

def turn_right():
        stop()
        TURN_MOTORCE_HIGH

def turn_left():
	stop()
	TURN_MOTORCE_HIGH
	TURN_MOTORIN_HIGH
    
 
def ir_led_on( user_pin ):

    # Turn on LED
    if user_pin == DIGITAL_P2_3:
        P2OUT |= BIT3
    elif user_pin == DIGITAL_P2_5:
        P2OUT |= BIT5
    elif user_pin == DIGITAL_P2_6:
        P2OUT |= BIT6
    elif user_pin == DIGITAL_P2_7:
        P2OUT |= BIT7

 
    
def ir_led_off( user_pin ):

    # Turn off LED
    if user_pin == DIGITAL_P2_3:
        P2OUT &= ~BIT3
    elif user_pin == DIGITAL_P2_5:
        P2OUT &= ~BIT5
    elif user_pin == DIGITAL_P2_6:
        P2OUT &= ~BIT6
    elif user_pin == DIGITAL_P2_7:
        P2OUT &= ~BIT7




#Voltage goes down as IR Transistor sees IR
def Read_IR( analog_pin, led_pin ):

    ConfigureADC10(analog_pin)      # Enable A/D converter 	
    ir_led_on(led_pin)              # Turn on LED
    Delay(2)
    ADC10CTL0 |= ENC + ADC10SC      # Start A/D conversion
    while (ADC10CTL1 & BUSY):        # Wait if ADC10 core is active
        pass
    min = ADC10MEM                  # min voltage with IR LED on

    ir_led_off(led_pin)             # Turn off LED
    Delay(2);
    ADC10CTL0 |= ENC + ADC10SC      # Start A/D conversion
    while (ADC10CTL1 & BUSY):       # Wait if ADC10 core is active
        pass
    max = ADC10MEM

    dist = 0xffff
    if( max > min ):
        dist = max - min;
        if( dist > 1000 ):           # 1000 is arbitrary, this should be
            dist = 0                 # measured using a calibration process
        else:
            dist = 1000 - dist
    else:
        # LED on voltage equal LED off voltage - Object too far 
        pass

    return dist
    

def main():

  WDTCTL = WDTPW + WDTHOLD         # Stop WDT

# Initialize Clocks
  BCSCTL1 = CALBC1_1MHZ            # Set range
  DCOCTL = CALDCO_1MHZ;
  BCSCTL2 &= ~(DIVS_3)             # SMCLK = DCO = 1MHz  

  ConfigureUserGPIO()              # Init GPIO
  ConfigureFAN8200()               # Init GPIO for FAN8200
 
  for i in range(2):
      forward( )
      Delay( 500 )
      turn_right()
      Delay(0)
  
  turn_right()
  Delay( 50 )            # approx 90 degrees

  for i in range(2):
      forward( )
      Delay( 500 )
      turn_right()
      Delay(0)


  stop()

  while 1:
    a = 1


